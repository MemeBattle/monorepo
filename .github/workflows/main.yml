name: 'Build, push and deploy docker images'

on:
  push:
    branches: [ master ]

jobs:

  prepare-base-image:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Auth npm
      run: echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}\n@memebattle:registry=https://npm.pkg.github.com" >> .npmrc
    - name: CL
      run: cat .npmrc
    - name: Build and push
      uses: docker/build-push-action@v1.1.0
      with:
        # Username used to log in to a Docker registry. If not set then no login will occur
        username: ${{ secrets.DOCKER_USERNAME }}
        # Password or personal access token used to log in to a Docker registry. If not set then no login will occur
        password: ${{ secrets.DOCKER_PASSWORD }}
        # Comma-delimited list of tags. These will be added to the registry/repository to form the image's tags
        registry: docker.pkg.github.com
        repository: ${{ lowercase(github.repository) }}/base-monorepo
        tag_with_sha: true
        push: true

  ligretto-frontend-image:

    needs: prepare-base-image

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Build and push
      uses: docker/build-push-action@v1.1.0
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        registry: docker.pkg.github.com
        repository: ${{ lowercase(github.repository) }}/ligretto-frontend
        # Comma-delimited list of tags. These will be added to the registry/repository to form the image's tags
        tag_with_sha: true
        # Path to the build context
        dockerfile: './apps/ligretto-recovery/Dockerfile'
        # Comma-delimited list of images to consider as cache sources
        cache_froms: ${{ lowercase(github.repository) }}/base-monorepo
        # Whether to push the image
        push: true

  ligretto-backend-image:

    needs: prepare-base-image

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Build and push
      uses: docker/build-push-action@v1.1.0
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        registry: docker.pkg.github.com
        repository: ${{ lowercase(github.repository) }}/ligretto-backend
        # Comma-delimited list of tags. These will be added to the registry/repository to form the image's tags
        tag_with_sha: true
        # Path to the build context
        dockerfile: './apps/ligretto-backend/Dockerfile'
        # Comma-delimited list of images to consider as cache sources
        cache_froms: ${{ lowercase(lowercase(lowercase(github.repository))) }}/base-monorepo
        # Whether to push the image
        push: true

  ligretto-ui-image:

    needs: prepare-base-image

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Build and push
      uses: docker/build-push-action@v1.1.0
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        registry: docker.pkg.github.com
        repository: ${{ lowercase(lowercase(github.repository)) }}/ligretto-ui
        # Comma-delimited list of tags. These will be added to the registry/repository to form the image's tags
        tag_with_sha: true
        # Path to the build context
        dockerfile: './packages/ligretto-ui/Dockerfile'
        # Comma-delimited list of images to consider as cache sources
        cache_froms: ${{ lowercase(lowercase(github.repository)) }}/base-monorepo
        # Whether to push the image
        push: true

  deploy:
    needs: [ligretto-frontend-image, ligretto-ui-image, ligretto-backend-image]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        name: Checkout
      - name: Setup SSH
        uses: kielabokkie/ssh-key-and-known-hosts-action@v1.1.0
        with:
          ssh-private-key: ${{ secrets.AWS_CI_PRIVATE_KEY }}
          ssh-host: mems.fun

      - name: create docker context
        run: docker context create remote --docker "host=ssh://ci@mems.fun"

      - name: deploy stack
        run: |
          docker context use remote
          env $(cat .env | grep ^[A-Z] | xargs) docker stack deploy --with-registry-auth --prune -c docker-compose.deploy.yml CAS
